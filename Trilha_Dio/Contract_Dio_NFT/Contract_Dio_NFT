// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.0;

// Importando biblioteca openzeppelin padroões ERC721 (NFT)
// Documentação biblioteca: https://ethereum.org/pt-br/developers/docs/standards/tokens/erc-721/

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";


contract PokeDIO is ERC721{

    // estrurura dos personagens do jogo

    struct Pokemon{
        string name;
        uint level;
        string img;
    }

    // Array do tipo struct Pokemon

    Pokemon[] public pokemons;
   
   // Endereço dono do contrato

    address public gameOwner;

    // Contrutor  recebendo o nome e o simbolo do jogo e iniciando a variavel gameOwner com o endereço do contrato

    constructor () ERC721 ("PokeDIO", "PKD"){

        gameOwner = msg.sender;

    } 

    // Garantir que apenas o endereço de quem esta executando o contrato

    modifier onlyOwnerOf(uint _monsterId) {

        require(ownerOf(_monsterId) == msg.sender,"Apenas o dono pode batalhar com este Pokemon");
        _;

    }

    // função para batalha chamndo nosso modificador

    function battle(uint _attackingPokemon, uint _defendingPokemon) public onlyOwnerOf(_attackingPokemon){
        Pokemon storage attacker = pokemons[_attackingPokemon];
        Pokemon storage defender = pokemons[_defendingPokemon];

         if (attacker.level >= defender.level) {
            attacker.level += 2;
            defender.level += 1;
        }else{
            attacker.level += 1;
            defender.level += 2;
        }
    }

    function createNewPokemon(string memory _name, address _to, string memory _img) public {
        require(msg.sender == gameOwner, "Apenas o dono do jogo pode criar novos Pokemons");
        uint id = pokemons.length;
        pokemons.push(Pokemon(_name, 1,_img));
        _safeMint(_to, id);  // mintar criar o token
    }


}
